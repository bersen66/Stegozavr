# AUTOGENERATED, DON'T CHANGE THIS FILE!


if (NOT USERVER_CHECK_PACKAGE_VERSIONS)
  unset(Crypto_FIND_VERSION)
endif()

if (TARGET Crypto)
  if (NOT Crypto_FIND_VERSION)
      set(Crypto_FOUND ON)
      return()
  endif()

  if (Crypto_VERSION)
      if (Crypto_FIND_VERSION VERSION_LESS_EQUAL Crypto_VERSION)
          set(Crypto_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${Crypto_VERSION} "
              "of Crypto when version ${Crypto_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `Crypto` package.\n\tDebian: sudo apt update && sudo apt install libssl-dev\n\tMacOS: brew install openssl\n\tFedora: sudo dnf install openssl-devel\n\tArchLinux: sudo pacman -S openssl\\n")


include(FindPackageHandleStandardArgs)





if (Crypto_VERSION)
  set(OpenSSL_VERSION ${Crypto_VERSION})
endif()

if (NOT OpenSSL_VERSION)
  include(DetectVersion)

  if (UNIX AND NOT APPLE)
    deb_version(OpenSSL_VERSION libssl-dev)
    rpm_version(OpenSSL_VERSION openssl-devel)
    pacman_version(OpenSSL_VERSION openssl)
    
  endif()
  if (APPLE)
    brew_version(OpenSSL_VERSION openssl)
  endif()
  pkg_config_version(OpenSSL_VERSION openssl)
endif()

find_package(OpenSSL 
    COMPONENTS Crypto
 )
set(Crypto_FOUND ${OpenSSL_FOUND})
 

if (NOT Crypto_FOUND)
  if (Crypto_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${Crypto_FIND_VERSION}")
  endif()

  return()
endif()

if (Crypto_FIND_VERSION)
  if (OpenSSL_VERSION VERSION_LESS Crypto_FIND_VERSION)
      message(STATUS
          "Version of Crypto is '${OpenSSL_VERSION}'. "
          "Required version is at least '${Crypto_FIND_VERSION}'. "
          "Ignoring found Crypto. "
          "Note: Set -DUSERVER_CHECK_PACKAGE_VERSIONS=0 to skip package version checks if the package is fine."
      )
      set(Crypto_FOUND OFF)
      return()
  endif()
endif()

 
if (NOT TARGET Crypto)
  add_library(Crypto INTERFACE IMPORTED GLOBAL)

  if (TARGET OpenSSL::Crypto)
    target_link_libraries(Crypto INTERFACE OpenSSL::Crypto)
  endif()
  
  # Target Crypto is created
endif()

if (OpenSSL_VERSION)
  set(Crypto_VERSION "${OpenSSL_VERSION}" CACHE STRING "Version of the Crypto")
endif()
