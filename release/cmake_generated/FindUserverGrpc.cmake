# AUTOGENERATED, DON'T CHANGE THIS FILE!


if (NOT USERVER_CHECK_PACKAGE_VERSIONS)
  unset(UserverGrpc_FIND_VERSION)
endif()

if (TARGET UserverGrpc)
  if (NOT UserverGrpc_FIND_VERSION)
      set(UserverGrpc_FOUND ON)
      return()
  endif()

  if (UserverGrpc_VERSION)
      if (UserverGrpc_FIND_VERSION VERSION_LESS_EQUAL UserverGrpc_VERSION)
          set(UserverGrpc_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${UserverGrpc_VERSION} "
              "of UserverGrpc when version ${UserverGrpc_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `UserverGrpc` package.\n\tDebian: sudo apt update && sudo apt install libgrpc-dev libgrpc++-dev libgrpc++1 protobuf-compiler-grpc\n\tMacOS: brew install grpc\n\tArchLinux: sudo pacman -S grpc\\n")


include(FindPackageHandleStandardArgs)

find_library(UserverGrpc_LIBRARIES_grpc
  NAMES grpc
)
list(APPEND UserverGrpc_LIBRARIES ${UserverGrpc_LIBRARIES_grpc})
find_library(UserverGrpc_LIBRARIES_grpc++
  NAMES grpc++
)
list(APPEND UserverGrpc_LIBRARIES ${UserverGrpc_LIBRARIES_grpc++})
find_library(UserverGrpc_LIBRARIES_gpr
  NAMES gpr
)
list(APPEND UserverGrpc_LIBRARIES ${UserverGrpc_LIBRARIES_gpr})
find_library(UserverGrpc_LIBRARIES_absl_absl_synchronization_grpc
  NAMES absl absl_synchronization grpc
)
list(APPEND UserverGrpc_LIBRARIES ${UserverGrpc_LIBRARIES_absl_absl_synchronization_grpc})

find_path(UserverGrpc_INCLUDE_DIRS_grpc_grpc_h
  NAMES grpc/grpc.h
)
list(APPEND UserverGrpc_INCLUDE_DIRS ${UserverGrpc_INCLUDE_DIRS_grpc_grpc_h})



if (UserverGrpc_VERSION)
  set(UserverGrpc_VERSION ${UserverGrpc_VERSION})
endif()

if (NOT UserverGrpc_VERSION)
  include(DetectVersion)

  if (UNIX AND NOT APPLE)
    deb_version(UserverGrpc_VERSION libgrpc-dev)
    
    pacman_version(UserverGrpc_VERSION grpc)
    
  endif()
  if (APPLE)
    brew_version(UserverGrpc_VERSION grpc)
  endif()
  pkg_config_version(UserverGrpc_VERSION grpc++)
endif()

 
find_package_handle_standard_args(
  UserverGrpc
    REQUIRED_VARS
      UserverGrpc_LIBRARIES
      UserverGrpc_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  UserverGrpc_LIBRARIES
  UserverGrpc_INCLUDE_DIRS
  
)

if (NOT UserverGrpc_FOUND)
  if (UserverGrpc_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${UserverGrpc_FIND_VERSION}")
  endif()

  return()
endif()

if (UserverGrpc_FIND_VERSION)
  if (UserverGrpc_VERSION VERSION_LESS UserverGrpc_FIND_VERSION)
      message(STATUS
          "Version of UserverGrpc is '${UserverGrpc_VERSION}'. "
          "Required version is at least '${UserverGrpc_FIND_VERSION}'. "
          "Ignoring found UserverGrpc. "
          "Note: Set -DUSERVER_CHECK_PACKAGE_VERSIONS=0 to skip package version checks if the package is fine."
      )
      set(UserverGrpc_FOUND OFF)
      return()
  endif()
endif()

 
if (NOT TARGET UserverGrpc)
  add_library(UserverGrpc INTERFACE IMPORTED GLOBAL)

  target_include_directories(UserverGrpc INTERFACE ${UserverGrpc_INCLUDE_DIRS})
  message(STATUS "UserverGrpc include directories: ${UserverGrpc_INCLUDE_DIRS}")
  target_link_libraries(UserverGrpc INTERFACE ${UserverGrpc_LIBRARIES})
  message(STATUS "UserverGrpc libraries: ${UserverGrpc_LIBRARIES}")
  
  # Target UserverGrpc is created
endif()

if (UserverGrpc_VERSION)
  set(UserverGrpc_VERSION "${UserverGrpc_VERSION}" CACHE STRING "Version of the UserverGrpc")
endif()
