# AUTOGENERATED, DON'T CHANGE THIS FILE!


if (NOT USERVER_CHECK_PACKAGE_VERSIONS)
  unset(GrpcChannelz_FIND_VERSION)
endif()

if (TARGET GrpcChannelz)
  if (NOT GrpcChannelz_FIND_VERSION)
      set(GrpcChannelz_FOUND ON)
      return()
  endif()

  if (GrpcChannelz_VERSION)
      if (GrpcChannelz_FIND_VERSION VERSION_LESS_EQUAL GrpcChannelz_VERSION)
          set(GrpcChannelz_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${GrpcChannelz_VERSION} "
              "of GrpcChannelz when version ${GrpcChannelz_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `GrpcChannelz` package.\n\tDebian: sudo apt update && sudo apt install libgrpc-dev libgrpc++-dev libgrpc++1 protobuf-compiler-grpc\n\tMacOS: brew install grpc\n\tArchLinux: sudo pacman -S grpc\\n")


include(FindPackageHandleStandardArgs)

find_library(GrpcChannelz_LIBRARIES_grpcpp_channelz
  NAMES grpcpp_channelz
)
list(APPEND GrpcChannelz_LIBRARIES ${GrpcChannelz_LIBRARIES_grpcpp_channelz})

find_path(GrpcChannelz_INCLUDE_DIRS_grpc_grpc_h
  NAMES grpc/grpc.h
)
list(APPEND GrpcChannelz_INCLUDE_DIRS ${GrpcChannelz_INCLUDE_DIRS_grpc_grpc_h})



if (GrpcChannelz_VERSION)
  set(GrpcChannelz_VERSION ${GrpcChannelz_VERSION})
endif()

if (NOT GrpcChannelz_VERSION)
  include(DetectVersion)

  if (UNIX AND NOT APPLE)
    deb_version(GrpcChannelz_VERSION libgrpc-dev)
    
    pacman_version(GrpcChannelz_VERSION grpc)
    
  endif()
  if (APPLE)
    brew_version(GrpcChannelz_VERSION grpc)
  endif()
  pkg_config_version(GrpcChannelz_VERSION grpc++)
endif()

 
find_package_handle_standard_args(
  GrpcChannelz
    REQUIRED_VARS
      GrpcChannelz_LIBRARIES
      GrpcChannelz_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  GrpcChannelz_LIBRARIES
  GrpcChannelz_INCLUDE_DIRS
  
)

if (NOT GrpcChannelz_FOUND)
  if (GrpcChannelz_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${GrpcChannelz_FIND_VERSION}")
  endif()

  return()
endif()

if (GrpcChannelz_FIND_VERSION)
  if (GrpcChannelz_VERSION VERSION_LESS GrpcChannelz_FIND_VERSION)
      message(STATUS
          "Version of GrpcChannelz is '${GrpcChannelz_VERSION}'. "
          "Required version is at least '${GrpcChannelz_FIND_VERSION}'. "
          "Ignoring found GrpcChannelz. "
          "Note: Set -DUSERVER_CHECK_PACKAGE_VERSIONS=0 to skip package version checks if the package is fine."
      )
      set(GrpcChannelz_FOUND OFF)
      return()
  endif()
endif()

 
if (NOT TARGET GrpcChannelz)
  add_library(GrpcChannelz INTERFACE IMPORTED GLOBAL)

  target_include_directories(GrpcChannelz INTERFACE ${GrpcChannelz_INCLUDE_DIRS})
  message(STATUS "GrpcChannelz include directories: ${GrpcChannelz_INCLUDE_DIRS}")
  target_link_libraries(GrpcChannelz INTERFACE ${GrpcChannelz_LIBRARIES})
  message(STATUS "GrpcChannelz libraries: ${GrpcChannelz_LIBRARIES}")
  
  # Target GrpcChannelz is created
endif()

if (GrpcChannelz_VERSION)
  set(GrpcChannelz_VERSION "${GrpcChannelz_VERSION}" CACHE STRING "Version of the GrpcChannelz")
endif()
