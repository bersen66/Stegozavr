# AUTOGENERATED, DON'T CHANGE THIS FILE!


if (NOT USERVER_CHECK_PACKAGE_VERSIONS)
  unset(libintl_FIND_VERSION)
endif()

if (TARGET libintl)
  if (NOT libintl_FIND_VERSION)
      set(libintl_FOUND ON)
      return()
  endif()

  if (libintl_VERSION)
      if (libintl_FIND_VERSION VERSION_LESS_EQUAL libintl_VERSION)
          set(libintl_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${libintl_VERSION} "
              "of libintl when version ${libintl_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `libintl` package.\\n")


include(FindPackageHandleStandardArgs)

find_library(libintl_LIBRARIES_libintl_a
  NAMES libintl.a
  PATHS /usr/local/lib
)
list(APPEND libintl_LIBRARIES ${libintl_LIBRARIES_libintl_a})

find_path(libintl_INCLUDE_DIRS_stdio_h
  NAMES stdio.h
)
list(APPEND libintl_INCLUDE_DIRS ${libintl_INCLUDE_DIRS_stdio_h})



if (libintl_VERSION)
  set(libintl_VERSION ${libintl_VERSION})
endif()


 
find_package_handle_standard_args(
  libintl
    REQUIRED_VARS
      libintl_LIBRARIES
      libintl_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  libintl_LIBRARIES
  libintl_INCLUDE_DIRS
  
)

if (NOT libintl_FOUND)
  if (libintl_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${libintl_FIND_VERSION}")
  endif()

  return()
endif()

if (libintl_FIND_VERSION)
  if (libintl_VERSION VERSION_LESS libintl_FIND_VERSION)
      message(STATUS
          "Version of libintl is '${libintl_VERSION}'. "
          "Required version is at least '${libintl_FIND_VERSION}'. "
          "Ignoring found libintl. "
          "Note: Set -DUSERVER_CHECK_PACKAGE_VERSIONS=0 to skip package version checks if the package is fine."
      )
      set(libintl_FOUND OFF)
      return()
  endif()
endif()

 
if (NOT TARGET libintl)
  add_library(libintl INTERFACE IMPORTED GLOBAL)

  target_include_directories(libintl INTERFACE ${libintl_INCLUDE_DIRS})
  message(STATUS "libintl include directories: ${libintl_INCLUDE_DIRS}")
  target_link_libraries(libintl INTERFACE ${libintl_LIBRARIES})
  message(STATUS "libintl libraries: ${libintl_LIBRARIES}")
  
  # Target libintl is created
endif()

if (libintl_VERSION)
  set(libintl_VERSION "${libintl_VERSION}" CACHE STRING "Version of the libintl")
endif()
