# AUTOGENERATED, DON'T CHANGE THIS FILE!


if (NOT USERVER_CHECK_PACKAGE_VERSIONS)
  unset(Git_FIND_VERSION)
endif()

if (TARGET Git)
  if (NOT Git_FIND_VERSION)
      set(Git_FOUND ON)
      return()
  endif()

  if (Git_VERSION)
      if (Git_FIND_VERSION VERSION_LESS_EQUAL Git_VERSION)
          set(Git_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${Git_VERSION} "
              "of Git when version ${Git_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `Git` package.\\n")


include(FindPackageHandleStandardArgs)



find_program(Git_EXECUTABLE_git_eg
  NAMES git eg
  PATH_SUFFIXES Git/cmd Git/bin
)
list(APPEND Git_EXECUTABLE ${Git_EXECUTABLE_git_eg})


if (Git_VERSION)
  set(Git_VERSION ${Git_VERSION})
endif()


 
find_package_handle_standard_args(
  Git
    REQUIRED_VARS
      
      
      Git_EXECUTABLE
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  
  
  Git_EXECUTABLE
)

if (NOT Git_FOUND)
  if (Git_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${Git_FIND_VERSION}")
  endif()

  return()
endif()

if (Git_FIND_VERSION)
  if (Git_VERSION VERSION_LESS Git_FIND_VERSION)
      message(STATUS
          "Version of Git is '${Git_VERSION}'. "
          "Required version is at least '${Git_FIND_VERSION}'. "
          "Ignoring found Git. "
          "Note: Set -DUSERVER_CHECK_PACKAGE_VERSIONS=0 to skip package version checks if the package is fine."
      )
      set(Git_FOUND OFF)
      return()
  endif()
endif()

 
